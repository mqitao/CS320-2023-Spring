"C:\\Users\\Tao\\Documents\\GitHub\\CS320-2023-Spring\\assigns\\01\\Testing"


use "assign01-01-test.sml";

Standard ML of New Jersey (32-bit) v110.96 [built: Fri Dec 13 15:22:22 2019]
- OS.FileSys.getDir();
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val it = "C:\\WINDOWS\\system32" : string
- OS.FileSys.chDir("C:\\Users\\Tao\\Documents\\GitHub\\CS320-2023-Spring\\assigns\\01\\Testing");



- use "assign01-01-test.sml";
[opening assign01-01-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val it = () : unit
[opening ./../MySolution/assign01-01.sml]
[opening ./../assign01.sml]
val list_append = fn : 'a list * 'a list -> 'a list
[autoloading]
[autoloading done]
val list_reverse = fn : 'a list -> 'a list
exception XlistConsMatch
exception XlistSubscript
datatype 'a xlist
  = xlist_append of 'a xlist * 'a xlist
  | xlist_cons of 'a * 'a xlist
  | xlist_nil
  | xlist_reverse of 'a xlist
  | xlist_snoc of 'a xlist * 'a
val list_of_xlist = fn : 'a xlist -> 'a list
val it = () : unit
val xlist_size = fn : 'a xlist -> int
val it = () : unit
Assign01-01-test passed!
val list_size = fn : 'a list -> int
val xs = <hidden-value> : 'a xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs =
  xlist_append
    (xlist_reverse (xlist_snoc (#,#)),xlist_reverse (xlist_snoc (#,#)))
  : int xlist
val it = () : unit


- use "assign01-02-test.sml";
[opening assign01-02-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val it = () : unit
[opening ./../MySolution/assign01-02.sml]
val xlist_size = fn : 'a xlist -> int
val xlist_sub = fn : 'a xlist * int -> 'a
val it = () : unit
Assign01-02-test passed!
val list_size = fn : 'a list -> int
val xs = <hidden-value> : 'a xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs =
  xlist_append
    (xlist_reverse (xlist_snoc (#,#)),xlist_reverse (xlist_snoc (#,#)))
  : int xlist
val it = () : unit


- use "assign01-03-test.sml";
[opening assign01-03-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val it = () : unit
[opening ./../MySolution/assign01-03.sml]
val xlist_remove_reverse = fn : 'a xlist -> 'a xlist
val it = () : unit
Assign01-03-test passed!
val list_size = fn : 'a list -> int
val nappend = fn : 'a xlist -> int
val nreverse = fn : 'a xlist -> int
val xs = <hidden-value> : 'a xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val ys = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs = <hidden-value> : int xlist
val xs =
  xlist_append
    (xlist_reverse (xlist_snoc (#,#)),xlist_reverse (xlist_snoc (#,#)))
  : int xlist
val ys =
  xlist_append (xlist_cons (2,xlist_snoc #),xlist_cons (2,xlist_snoc #))
  : int xlist
val it = () : unit

- use "assign01-04-test.sml";
[opening assign01-04-test.sml]
[opening ./../MySolution/assign01-04.sml]
val strsub = fn : string * int -> char
val ord = fn : char -> int
val strlen = fn : string -> int
val ch_legal = fn : char -> int
val is_legal = fn : string * int * int -> int
val power = fn : int -> int
val restr2int = fn : string * char * int * int -> int
val str2int = fn : string -> int option
val str2int_opt = fn : string -> int option
val it = () : unit
Assign01-04-test passed!
val it = () : unit