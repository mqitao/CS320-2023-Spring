- use "assign04-01-test.sml";
[opening assign04-01-test.sml]
[opening ./../MySolution/assign04-01.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_filter = fn : 'a list * ('a -> bool) -> 'a list
val list_reduce_left = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_concat = fn : 'a list list -> 'a list
val list_extend = fn : 'a list * 'a -> 'a list
val list_foldleft = <hidden-value> : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = <hidden-value> : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_forall = fn : 'a list * ('a -> bool) -> bool
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val int0_foreach = fn : int * (unit -> unit) -> unit
val int1_foreach = fn : int * (int -> unit) -> unit
val string_foreach = fn : string * (char -> unit) -> unit
val forall_to_foreach = fn
  : ('a * ('b -> bool) -> bool) -> 'a * ('b -> unit) -> unit
val foreach_to_forall = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> bool
val foreach_to_foldleft = fn
  : ('a * ('b -> unit) -> unit) -> 'a * 'c * ('c * 'b -> 'c) -> 'c
val foreach_to_length = fn : ('a * ('b -> unit) -> unit) -> 'a -> int
val foreach_to_get_at = fn : ('a * ('b -> unit) -> unit) -> 'a * int -> 'b
val foreach_to_listize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_rlistize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_map_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> 'c) -> 'c list
val foreach_to_filter_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> 'b list
val int1_forall = fn : int * (int -> bool) -> bool
val string_forall = fn : string * (char -> bool) -> bool
val list_get_at = fn : 'a list * int -> 'a
val int1_listize = fn : int -> int list
val int1_rlistize = fn : int -> int list
val list_rlistize = fn : 'a list -> 'a list
val string_listize = fn : string -> char list
val string_rlistize = fn : string -> char list
val int1_map_list = fn : int * (int -> 'a) -> 'a list
val string_map_list = fn : string * (char -> 'a) -> 'a list
val int1_foldleft = fn : int * 'a * ('a * int -> 'a) -> 'a
val int1_foldright = fn : int * 'a * (int * 'a -> 'a) -> 'a
val list_foldleft = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val string_foldleft = fn : string * 'a * ('a * char -> 'a) -> 'a
val string_foldright = fn : string * 'a * (char * 'a -> 'a) -> 'a
val it = () : unit
val helper = fn : int -> int -> bool
val isPrime = fn : int -> bool
val it = () : unit
Assign04-01-test passed!
val it = () : unit



- use "assign04-02-test.sml";
[opening assign04-02-test.sml]
[opening ./../MySolution/assign04-02.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_filter = fn : 'a list * ('a -> bool) -> 'a list
val list_reduce_left = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_concat = fn : 'a list list -> 'a list
val list_extend = fn : 'a list * 'a -> 'a list
val list_foldleft = <hidden-value> : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = <hidden-value> : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_forall = fn : 'a list * ('a -> bool) -> bool
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val int0_foreach = fn : int * (unit -> unit) -> unit
val int1_foreach = fn : int * (int -> unit) -> unit
val string_foreach = fn : string * (char -> unit) -> unit
val forall_to_foreach = fn
  : ('a * ('b -> bool) -> bool) -> 'a * ('b -> unit) -> unit
val foreach_to_forall = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> bool
val foreach_to_foldleft = fn
  : ('a * ('b -> unit) -> unit) -> 'a * 'c * ('c * 'b -> 'c) -> 'c
val foreach_to_length = fn : ('a * ('b -> unit) -> unit) -> 'a -> int
val foreach_to_get_at = fn : ('a * ('b -> unit) -> unit) -> 'a * int -> 'b
val foreach_to_listize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_rlistize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_map_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> 'c) -> 'c list
val foreach_to_filter_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> 'b list
val int1_forall = fn : int * (int -> bool) -> bool
val string_forall = fn : string * (char -> bool) -> bool
val list_get_at = fn : 'a list * int -> 'a
val int1_listize = fn : int -> int list
val int1_rlistize = fn : int -> int list
val list_rlistize = fn : 'a list -> 'a list
val string_listize = fn : string -> char list
val string_rlistize = fn : string -> char list
val int1_map_list = fn : int * (int -> 'a) -> 'a list
val string_map_list = fn : string * (char -> 'a) -> 'a list
val int1_foldleft = fn : int * 'a * ('a * int -> 'a) -> 'a
val int1_foldright = fn : int * 'a * (int * 'a -> 'a) -> 'a
val list_foldleft = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val string_foldleft = fn : string * 'a * ('a * char -> 'a) -> 'a
val string_foldright = fn : string * 'a * (char * 'a -> 'a) -> 'a
val it = () : unit
val helper_sub = fn : 'a list list -> 'a list -> 'a list list
val list_subsets = fn : 'a list -> 'a list list
val it = () : unit
Assign04-02-test passed!
val power = fn : int * int -> int
val xs = [1,2,3,4,5] : int list
val xss =
  [[],[1],[2],[2,1],[3],[3,1],[3,2],[3,2,1],[4],[4,1],[4,2],[4,2,1],...]
  : int list list
val it = () : unit



- use "assign04-03-test.sml";
[opening assign04-03-test.sml]
[opening ./../MySolution/assign04-03.sml]
type ('a,'b) forall_t = 'a * ('b -> bool) -> bool
type ('a,'b) exists_t = 'a * ('b -> bool) -> bool
val forall_to_exists = fn : ('a,'b) forall_t -> ('a,'b) exists_t
val it = () : unit
Assign04-03-test passed!
val power = fn : int * int -> int
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_forall' = fn : 'a list * ('a -> bool) -> bool
val list_exists' = fn : 'a list * ('a -> bool) -> bool
val xs = [1,2,3,4,5] : int list
val p1 = fn : int -> bool
val p2 = fn : int -> bool
val p3 = fn : int -> bool
val p4 = fn : int -> bool
val it = () : unit



- use "assign04-04-test.sml";
[opening assign04-04-test.sml]
[opening ./../MySolution/assign04-04.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_filter = fn : 'a list * ('a -> bool) -> 'a list
val list_reduce_left = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_concat = fn : 'a list list -> 'a list
val list_extend = fn : 'a list * 'a -> 'a list
val list_foldleft = <hidden-value> : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = <hidden-value> : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_forall = fn : 'a list * ('a -> bool) -> bool
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val int0_foreach = fn : int * (unit -> unit) -> unit
val int1_foreach = fn : int * (int -> unit) -> unit
val string_foreach = fn : string * (char -> unit) -> unit
val forall_to_foreach = fn
  : ('a * ('b -> bool) -> bool) -> 'a * ('b -> unit) -> unit
val foreach_to_forall = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> bool
val foreach_to_foldleft = fn
  : ('a * ('b -> unit) -> unit) -> 'a * 'c * ('c * 'b -> 'c) -> 'c
val foreach_to_length = fn : ('a * ('b -> unit) -> unit) -> 'a -> int
val foreach_to_get_at = fn : ('a * ('b -> unit) -> unit) -> 'a * int -> 'b
val foreach_to_listize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_rlistize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_map_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> 'c) -> 'c list
val foreach_to_filter_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> 'b list
val int1_forall = fn : int * (int -> bool) -> bool
val string_forall = fn : string * (char -> bool) -> bool
val list_get_at = fn : 'a list * int -> 'a
val int1_listize = fn : int -> int list
val int1_rlistize = fn : int -> int list
val list_rlistize = fn : 'a list -> 'a list
val string_listize = fn : string -> char list
val string_rlistize = fn : string -> char list
val int1_map_list = fn : int * (int -> 'a) -> 'a list
val string_map_list = fn : string * (char -> 'a) -> 'a list
val int1_foldleft = fn : int * 'a * ('a * int -> 'a) -> 'a
val int1_foldright = fn : int * 'a * (int * 'a -> 'a) -> 'a
val list_foldleft = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val string_foldleft = fn : string * 'a * ('a * char -> 'a) -> 'a
val string_foldright = fn : string * 'a * (char * 'a -> 'a) -> 'a
val it = () : unit
type board_t = int * int * int * int * int * int * int * int
val board_set = fn
  : board_t * int * int -> int * int * int * int * int * int * int * int
val board_get = fn : board_t * int -> int
val safety1 = fn : int * int * int * int -> bool
val safety2 = fn : int * int * board_t -> bool
val search_frag = fn : int list * board_t list * board_t * int -> board_t list
val unfold = fn : board_t list list -> board_t list
val search_cont = fn : int list * board_t list * int -> board_t list
val N = 8 : int
val queen8_puzzle_solve = fn : unit -> board_t list
val it = () : unit
Solution #1
. . . . . . . Q
. Q . . . . . .
. . . . Q . . .
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. . . Q . . . .
. . . . . Q . .

Solution #2
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .
. . Q . . . . .
. . . . . Q . .

Solution #3
. . . . . . . Q
. . Q . . . . .
Q . . . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . Q . . .
. . . . . . Q .
. . . Q . . . .

Solution #4
. . . . . . . Q
. . . Q . . . .
Q . . . . . . .
. . Q . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .
. . . . Q . . .

Solution #5
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . . . . Q
. . . . . Q . .
. . . Q . . . .
. Q . . . . . .
. . . . Q . . .

Solution #6
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .
. . Q . . . . .
Q . . . . . . .
. . . Q . . . .
. . . . . . . Q
. . . . Q . . .

Solution #7
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .
Q . . . . . . .
. . . . . . . Q
. . . . Q . . .
. . Q . . . . .
. . . . . Q . .

Solution #8
. . . . . . Q .
. . Q . . . . .
. . . . . . . Q
. Q . . . . . .
. . . . Q . . .
Q . . . . . . .
. . . . . Q . .
. . . Q . . . .

Solution #9
. . . . . . Q .
. . Q . . . . .
Q . . . . . . .
. . . . . Q . .
. . . . . . . Q
. . . . Q . . .
. Q . . . . . .
. . . Q . . . .

Solution #10
. . . . . . Q .
. . . Q . . . .
. Q . . . . . .
. . . . Q . . .
. . . . . . . Q
Q . . . . . . .
. . Q . . . . .
. . . . . Q . .

Solution #11
. . . . . . Q .
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
Q . . . . . . .
. . Q . . . . .
. . . . Q . . .

Solution #12
. . . . . . Q .
. . . . Q . . .
. . Q . . . . .
Q . . . . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .

Solution #13
. . . . . Q . .
Q . . . . . . .
. . . . Q . . .
. Q . . . . . .
. . . . . . . Q
. . Q . . . . .
. . . . . . Q .
. . . Q . . . .

Solution #14
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .
Q . . . . . . .
. . . Q . . . .
. . . . . . . Q
. . . . Q . . .
. . Q . . . . .

Solution #15
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . Q . . .
. . . . . . . Q
. . . Q . . . .

Solution #16
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . . . Q
. . . . Q . . .
Q . . . . . . .
. . . Q . . . .

Solution #17
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .
. . . . . . . Q
Q . . . . . . .
. . . . Q . . .

Solution #18
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. . . Q . . . .
Q . . . . . . .
. . . . . . . Q
. Q . . . . . .
. . . . Q . . .

Solution #19
. . . . . Q . .
. . Q . . . . .
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q

Solution #20
. . . . . Q . .
. . Q . . . . .
. . . . Q . . .
. . . . . . . Q
Q . . . . . . .
. . . Q . . . .
. Q . . . . . .
. . . . . . Q .

Solution #21
. . . . . Q . .
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .

Solution #22
. . . . . Q . .
. . Q . . . . .
Q . . . . . . .
. . . . . . . Q
. . . . Q . . .
. Q . . . . . .
. . . Q . . . .
. . . . . . Q .

Solution #23
. . . . . Q . .
. . Q . . . . .
Q . . . . . . .
. . . . . . . Q
. . . Q . . . .
. Q . . . . . .
. . . . . . Q .
. . . . Q . . .

Solution #24
. . . . . Q . .
. . . Q . . . .
. . . . . . Q .
Q . . . . . . .
. . . . . . . Q
. Q . . . . . .
. . . . Q . . .
. . Q . . . . .

Solution #25
. . . . . Q . .
. . . Q . . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . Q . . .
. Q . . . . . .
. . . . . . . Q

Solution #26
. . . . . Q . .
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .

Solution #27
. . . . . Q . .
. . . Q . . . .
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .

Solution #28
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .
. . Q . . . . .

Solution #29
. . . . Q . . .
Q . . . . . . .
. . . . . . . Q
. . . Q . . . .
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . Q . .

Solution #30
. . . . Q . . .
Q . . . . . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .

Solution #31
. . . . Q . . .
Q . . . . . . .
. . . Q . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .

Solution #32
. . . . Q . . .
. Q . . . . . .
. . . . . . . Q
Q . . . . . . .
. . . Q . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . Q . .

Solution #33
. . . . Q . . .
. Q . . . . . .
. . . . . Q . .
Q . . . . . . .
. . . . . . Q .
. . . Q . . . .
. . . . . . . Q
. . Q . . . . .

Solution #34
. . . . Q . . .
. Q . . . . . .
. . . Q . . . .
. . . . . Q . .
. . . . . . . Q
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .

Solution #35
. . . . Q . . .
. Q . . . . . .
. . . Q . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . . . Q
. . . . . Q . .
Q . . . . . . .

Solution #36
. . . . Q . . .
. . Q . . . . .
. . . . . . . Q
. . . Q . . . .
. . . . . . Q .
Q . . . . . . .
. . . . . Q . .
. Q . . . . . .

Solution #37
. . . . Q . . .
. . Q . . . . .
Q . . . . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .
. . . . . . Q .

Solution #38
. . . . Q . . .
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
. . . Q . . . .

Solution #39
. . . . Q . . .
. . . . . . Q .
. . . Q . . . .
Q . . . . . . .
. . Q . . . . .
. . . . . . . Q
. . . . . Q . .
. Q . . . . . .

Solution #40
. . . . Q . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .
. . . . . . . Q
Q . . . . . . .
. . Q . . . . .
. . . . . Q . .

Solution #41
. . . . Q . . .
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .
. . Q . . . . .
Q . . . . . . .
. . . . . . . Q
. . . Q . . . .

Solution #42
. . . . Q . . .
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .
. . Q . . . . .
Q . . . . . . .
. . . Q . . . .
. . . . . . . Q

Solution #43
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . . . . Q
. . . . . Q . .
. . . Q . . . .
. Q . . . . . .

Solution #44
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .

Solution #45
. . . . Q . . .
. . . . . . . Q
. . . Q . . . .
Q . . . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .
. . Q . . . . .

Solution #46
. . . . Q . . .
. . . . . . . Q
. . . Q . . . .
Q . . . . . . .
. . Q . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .

Solution #47
. . . Q . . . .
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .

Solution #48
. . . Q . . . .
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . Q . .

Solution #49
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . . Q . .

Solution #50
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
Q . . . . . . .
. . Q . . . . .
. . . . Q . . .
. . . . . . Q .

Solution #51
. . . Q . . . .
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . Q . .
. . . . . . . Q
. . . . Q . . .
Q . . . . . . .

Solution #52
. . . Q . . . .
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . Q . .
. . . . . . . Q
Q . . . . . . .
. . . . Q . . .

Solution #53
. . . Q . . . .
. Q . . . . . .
. . . . . . Q .
. . . . Q . . .
Q . . . . . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .

Solution #54
. . . Q . . . .
. Q . . . . . .
. . . . Q . . .
. . . . . . . Q
. . . . . Q . .
Q . . . . . . .
. . Q . . . . .
. . . . . . Q .

Solution #55
. . . Q . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . Q . . .

Solution #56
. . . Q . . . .
. . . . . Q . .
. . . . . . . Q
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .
. Q . . . . . .

Solution #57
. . . Q . . . .
. . . . . Q . .
Q . . . . . . .
. . . . Q . . .
. Q . . . . . .
. . . . . . . Q
. . Q . . . . .
. . . . . . Q .

Solution #58
. . . Q . . . .
. . . . . . Q .
. . . . Q . . .
. Q . . . . . .
. . . . . Q . .
Q . . . . . . .
. . Q . . . . .
. . . . . . . Q

Solution #59
. . . Q . . . .
. . . . . . Q .
. . . . Q . . .
. . Q . . . . .
Q . . . . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .

Solution #60
. . . Q . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . . . Q
. Q . . . . . .
. . . . Q . . .
Q . . . . . . .
. . . . . Q . .

Solution #61
. . . Q . . . .
. . . . . . Q .
Q . . . . . . .
. . . . . . . Q
. . . . Q . . .
. Q . . . . . .
. . . . . Q . .
. . Q . . . . .

Solution #62
. . . Q . . . .
. . . . . . . Q
. . . . Q . . .
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .

Solution #63
. . . Q . . . .
. . . . . . . Q
Q . . . . . . .
. . Q . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .
. . . . Q . . .

Solution #64
. . . Q . . . .
. . . . . . . Q
Q . . . . . . .
. . . . Q . . .
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .
. . Q . . . . .

Solution #65
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .
. . . . . Q . .

Solution #66
. . Q . . . . .
. . . . Q . . .
. . . . . . . Q
. . . Q . . . .
Q . . . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . Q . .

Solution #67
. . Q . . . . .
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .

Solution #68
. . Q . . . . .
. . . . Q . . .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
. . . Q . . . .
. . . . . . Q .
Q . . . . . . .

Solution #69
. . Q . . . . .
. . . . Q . . .
. Q . . . . . .
. . . . . . . Q
Q . . . . . . .
. . . . . . Q .
. . . Q . . . .
. . . . . Q . .

Solution #70
. . Q . . . . .
. . . . . Q . .
. . . . . . . Q
Q . . . . . . .
. . . . Q . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .

Solution #71
. . Q . . . . .
. . . . . Q . .
. . . . . . . Q
Q . . . . . . .
. . . Q . . . .
. . . . . . Q .
. . . . Q . . .
. Q . . . . . .

Solution #72
. . Q . . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .

Solution #73
. . Q . . . . .
. . . . . Q . .
. . . Q . . . .
Q . . . . . . .
. . . . . . . Q
. . . . Q . . .
. . . . . . Q .
. Q . . . . . .

Solution #74
. . Q . . . . .
. . . . . Q . .
. . . Q . . . .
. Q . . . . . .
. . . . . . . Q
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .

Solution #75
. . Q . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . Q . . .
. . . . . . . Q
Q . . . . . . .
. . . . . . Q .
. . . Q . . . .

Solution #76
. . Q . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .
. . . . Q . . .
Q . . . . . . .
. . . . . . . Q
. . . Q . . . .

Solution #77
. . Q . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . . . Q .
Q . . . . . . .
. . . Q . . . .
. . . . . . . Q
. . . . Q . . .

Solution #78
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
. . . Q . . . .
Q . . . . . . .
. . . . Q . . .

Solution #79
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . . . . . Q
. . . . Q . . .
Q . . . . . . .
. . . Q . . . .
. . . . . Q . .

Solution #80
. . Q . . . . .
. . . . . . . Q
. . . Q . . . .
. . . . . . Q .
Q . . . . . . .
. . . . . Q . .
. Q . . . . . .
. . . . Q . . .

Solution #81
. Q . . . . . .
. . . Q . . . .
. . . . . Q . .
. . . . . . . Q
. . Q . . . . .
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .

Solution #82
. Q . . . . . .
. . . . Q . . .
. . . . . . Q .
Q . . . . . . .
. . Q . . . . .
. . . . . . . Q
. . . . . Q . .
. . . Q . . . .

Solution #83
. Q . . . . . .
. . . . Q . . .
. . . . . . Q .
. . . Q . . . .
Q . . . . . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .

Solution #84
. Q . . . . . .
. . . . . Q . .
. . . . . . . Q
. . Q . . . . .
Q . . . . . . .
. . . Q . . . .
. . . . . . Q .
. . . . Q . . .

Solution #85
. Q . . . . . .
. . . . . Q . .
Q . . . . . . .
. . . . . . Q .
. . . Q . . . .
. . . . . . . Q
. . Q . . . . .
. . . . Q . . .

Solution #86
. Q . . . . . .
. . . . . . Q .
. . . . Q . . .
. . . . . . . Q
Q . . . . . . .
. . . Q . . . .
. . . . . Q . .
. . Q . . . . .

Solution #87
. Q . . . . . .
. . . . . . Q .
. . Q . . . . .
. . . . . Q . .
. . . . . . . Q
. . . . Q . . .
Q . . . . . . .
. . . Q . . . .

Solution #88
. Q . . . . . .
. . . . . . . Q
. . . . . Q . .
Q . . . . . . .
. . Q . . . . .
. . . . Q . . .
. . . . . . Q .
. . . Q . . . .

Solution #89
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .

Solution #90
Q . . . . . . .
. . . . . Q . .
. . . . . . . Q
. . Q . . . . .
. . . . . . Q .
. . . Q . . . .
. Q . . . . . .
. . . . Q . . .

Solution #91
Q . . . . . . .
. . . . . . Q .
. . . . Q . . .
. . . . . . . Q
. Q . . . . . .
. . . Q . . . .
. . . . . Q . .
. . Q . . . . .

Solution #92
Q . . . . . . .
. . . . . . Q .
. . . Q . . . .
. . . . . Q . .
. . . . . . . Q
. Q . . . . . .
. . . . Q . . .
. . Q . . . . .
Assign04-04-test passed: Congradulations!
val board_foreach = fn : board_t * (int -> unit) -> unit
val theSolutions =
  [(8,2,5,3,1,7,4,6),(8,2,4,1,7,5,3,6),(8,3,1,6,2,5,7,4),(8,4,1,3,6,2,7,5),
   (7,1,3,8,6,4,2,5),(7,2,6,3,1,4,8,5),(7,2,4,1,8,5,3,6),(7,3,8,2,5,1,6,4),
   (7,3,1,6,8,5,2,4),(7,4,2,5,8,1,3,6),(7,4,2,8,6,1,3,5),(7,5,3,1,6,8,2,4),
   ...] : board_t list
val queen8_puzzle_solve_show = fn : unit -> int
val nsol = 92 : int
val it = () : unit
