- use "assign03-01-test.sml";
[opening assign03-01-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_reduce_left = fn : 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val it = () : unit
[opening ./../MySolution/assign03-01.sml]
val find_root = fn : (int -> int) -> int
val it = () : unit
Assign03-01-test passed!
val it = () : unit



- use "assign03-02-test.sml"; 
[opening assign03-02-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]   
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool        
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list 
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_reduce_left = fn : 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val it = () : unit
[opening ./../MySolution/assign03-02.sml]
val list_range = fn : int * int -> int list
val it = () : unit
Assign03-02-test passed!
val it = () : unit



- use "assign03-03-test.sml"; 
[opening assign03-03-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_reduce_left = fn : 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val it = () : unit
[opening ./../MySolution/assign03-03.sml]
val list_tabulate = fn : int * (int -> 'a) -> 'a list
val it = () : unit
Assign03-03-test passed!
val it = () : unit


- use "assign03-04-test.sml";
[opening assign03-04-test.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_reduce_left = fn : 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val it = () : unit
[opening ./../MySolution/assign03-04.sml]
val find_longest = fn : int list list -> int list
val list_longest_ascend = fn : int list -> int list
val it = () : unit
Assign03-04-test passed!
val xs = <hidden-value> : 'a list
val xs = <hidden-value> : int list
val xs = <hidden-value> : int list
val xs = <hidden-value> : int list
val xs = <hidden-value> : int list
val xs = <hidden-value> : int list
val xs = [4,1,2,1,3,8,9,5,6,7,1,1,...] : int list
val it = () : unit
